@using ContosoCrafts.WebSite.Models
@using ContosoCrafts.WebSite.Services
@inject JsonFileFlashcardService FlashcardService
@inject JsonFileCategoryService CategoryService
@* do not delete Microsoft.AspNeCore.Components.Web, handles navigation*@
@using Microsoft.AspNetCore.Components.Web
@inject NavigationManager MyNavigationManager


<div>
    <p>Category ID: @(string.IsNullOrEmpty(categoryId) ? "All Categories" : categoryId)</p>
    <div class="masonry-grid">
        @if (HasNoFlashcards())
        {
            <p>No flashcards found with selected Category</p>
        }
        @foreach (var flashcard in GetFilteredFlashcards())
        {
            bool isFlipped = IsFlipped(flashcard.Id);
            string flipClass = isFlipped ? "flipped" : "";

            <div class="card @flipClass" data-id="@flashcard.Id" @onclick="() => ToggleCard(flashcard.Id)">
                <div class="card-header category">
                    <div>
                        <span class="category-item" style="background-color: @GetCategoryColor(flashcard.CategoryId)">
                            @flashcard.CategoryId
                        </span>
                    </div>
                    <div>
                        <span class="text-second">Level: </span>
                        @for (int i = 0; i < flashcard.DifficultyLevel; i++)
                        {
                            <img src="icons/dog-paw.svg" alt="dog-paw" class="difficulty-image"/>
                        }
                    </div>
                </div>
            
                <div class="card-body flashcard-body">
                    <p class="card-text text-center">
                        @if (isFlipped)
                        {
                            <span class="text-answer">@flashcard.Answer </span>
                        }
                        
                        @if (!isFlipped)
                        {
                            <span class="text-question">@flashcard.Question</span>
                        }
                    </p>
                </div>
            
                <div class="card-footer flashcard-footer">
                    @if (ShouldDisplayFlippedLabel(isFlipped, flashcard.OpenCount))
                    {
                        <div class="flipped-counter">
                            <span>Flipped</span>
                            <span class="badge rounded-pill custom-badge ms-auto">@flashcard.OpenCount</span>
                        </div>
                    }
            
                    @if (CanShowMoreInfoLink(isFlipped, flashcard.Url))
                    {
                        <a href="@flashcard.Url" target="_blank">More info</a>
                    }
                </div>
            </div>
        }
    </div>
</div>


@code {
    // Selected flashcard
    FlashcardModel selectedFlashcard; 

    // Id of the selected card to manage state
    public string selectedCardId; 

    // Track whether answer side is displayed
    public bool showAnswer;

    // Category Id obtained from URL to filter cards
    public string categoryId;

    // Fetches and filters flashcards based on the selected category ID
    public IEnumerable<FlashcardModel> GetFilteredFlashcards()
    {
        // Retrieves all flashcards from FlashcardService
        var allFlashcards = FlashcardService.GetAllData();

        if (!string.IsNullOrEmpty(categoryId))
        {
            return allFlashcards.Where(f =>
                string.Equals(f.CategoryId, categoryId, StringComparison.OrdinalIgnoreCase));
        }

        return allFlashcards;
    }

    // Get color of the category
    public string GetCategoryColor(string topicId)
    {
        // Calls CategoryService to get color value for given topic ID
        var categoryColor = CategoryService.GetCategoryColorById(topicId);

        // Returns retrieved color value
        return categoryColor;
    }

    // Called whenever parameters of the component change, such as a new URL
    // This method extracts the category ID from the URL path
    protected override void OnParametersSet()
    {
        // Retrieves current URL path
        var urlPath = MyNavigationManager.ToBaseRelativePath(MyNavigationManager.Uri);
        
        // Extracts last segment of URL path if there are multiple segments,
        // otherwise, it assigns null if there is only one segment
         categoryId = urlPath.Split('/').Length > 1 ? urlPath.Split('/').Last() : null;
    }

    // Toggles the selected flashcard between the question and answer side
    public void ToggleCard(string cardId)
    {
        // Check if the user is flipping to show answer
        var shouldFlipToAnswer = selectedCardId != cardId || !showAnswer;

        // Toggle the display of answer
        showAnswer = selectedCardId == cardId ? !showAnswer : true;
        selectedCardId = cardId;

        // Find the selected flashcard
        var flashcard = GetFilteredFlashcards().FirstOrDefault(f => f.Id == cardId);

        // Check if flashcard exists
        if (flashcard == null)
        {
            return;
        }

        // Check if the user is flipping to show the answer
        if (shouldFlipToAnswer)
        {
            // Increment OpenCount and update the flashcard data
            flashcard.OpenCount++;
            FlashcardService.UpdateFlashcard(flashcard);
        }
    }

    // Checks if there are no flashcards in filtered set
    public bool HasNoFlashcards() => !GetFilteredFlashcards().Any();
    
    // Determines if a specific card is currently flipped to answer side
    public bool IsFlipped(string cardId) => selectedCardId == cardId && showAnswer;
    
    // Checks if the "Flipped" label should be displayed based on whether  card is flipped and OpenCount
    public bool ShouldDisplayFlippedLabel(bool isFlipped, int openCount) => isFlipped == false && openCount > 0;
   
    // Checks if a "More info" link should be displayed when answer side is shown, URL is provided
    public bool CanShowMoreInfoLink(bool isFlipped, string url) => isFlipped && !string.IsNullOrEmpty(url);
}

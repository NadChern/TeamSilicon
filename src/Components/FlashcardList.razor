@using ContosoCrafts.WebSite.Models
@using ContosoCrafts.WebSite.Services
@inject JsonFileFlashcardService FlashcardService
@inject JsonFileCategoryService CategoryService
@using Microsoft.AspNetCore.Components.Web
@inject NavigationManager MyNavigationManager


<style>

  .masonry-grid {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 1rem;
  }

  .masonry-grid .card {
    break-inside: avoid;
    cursor: pointer;
    transition: transform 0.3s ease, box-shadow 0.3s ease;
    border-radius: 8px;
    overflow: hidden;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  }

  .masonry-grid .card:hover {
    transform: scale(1.05);
    box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);
    background-color: aliceblue;
  }

  .flipped {
    background-color: #b0e0e6 !important;
  }

  .category {
    display: flex;
    align-items: center;
    justify-content: space-between;
  }

  .categoryItem {
    padding: 3px 6px;
    border-radius: 5px;
    color: white;
  }

  .cardBody {
    position: relative;
    min-height: 200px;
    height: fit-content;
    text-align: center;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 18px;
    font-weight: 500;
  }

.custom-badge {
    background-color: #adb5bd; /* Bright green */
    color: #ffffff; /* White text for contrast */
    padding: 0.5em 1em; /* Adjust padding for a rounded, pill-like shape */
    font-size: 14px;
    border-radius: 50px; /* Makes the badge a pill shape */
    font-weight: 500; /* Slightly bolder text */
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15); /* Optional: subtle shadow for depth */
}

  .svg {
    width: 20px;
    height: 18px;
  }

  .text-second {
    font-size: 16px;
    margin-right: 5px;
  }
</style>


<div>
    <p>Category ID: @(string.IsNullOrEmpty(categoryId) ? "All Categories" : categoryId)</p>
    <div class="masonry-grid">
        @if (GetFilteredFlashcards().Count() == 0) // Check if any flashcards exist
        {
            <p>No flashcards found with selected Category</p>
        }
        else
        {
            @foreach (var flashcard in GetFilteredFlashcards())
            {
                bool isFlipped = selectedCardId == flashcard.Id && showAnswer;
                string flipClass = isFlipped ? "flipped" : "";

                <div class="card @flipClass" data-id="@flashcard.Id" @onclick="() => ToggleCard(flashcard.Id)">
                    <div class="card-header category">
                        <div>
                            <span class="categoryItem" style="background-color: @GetCategoryColor(flashcard.CategoryId)">
                                @flashcard.CategoryId
                            </span>
                        </div>
                        <div>
                            <span class="text-second">Level: </span>
                            @GetDifficultyPaws(flashcard.DifficultyLevel)
                        </div>
                    </div>

                    <div class="card-body cardBody">
                        <p class="card-text text-center" style="color: @(isFlipped ? "#36454f" : "inherit")">
                            @(isFlipped ? flashcard.Answer : flashcard.Question)
                        </p>
                    </div>
                    <div class="card-footer d-flex justify-content-between align-items-center" style="background-color: white; min-height: 48px;">
                        @if (!isFlipped)
                        {
                            <span class="badge rounded-pill custom-badge ms-auto">Flipped +@flashcard.OpenCount</span>
                        }
                        @if (isFlipped && !string.IsNullOrEmpty(flashcard.Url))
                        {
                            <a href="@flashcard.Url" target="_blank">More info</a>
                        }
                    </div>
                </div>
            }
        }
    </div>
</div>

@code {
    FlashcardModel selectedFlashcard; // selected flashcard
    private int selectedCardId; // Id of the selected card to manage state
    private bool showAnswer; // track whether answer side is displayed
    private string categoryId; // category Id obtained from URL to filter cards

    // Fetches and filters flashcards based on the selected category ID
    private IEnumerable<FlashcardModel> GetFilteredFlashcards()
    {
        var allFlashcards = FlashcardService.GetAllData();
        if (!string.IsNullOrEmpty(categoryId))
        {
            return allFlashcards.Where(f => f.CategoryId.ToLower() == categoryId.ToLower());
        }

        return allFlashcards;
    }

    // Get color of the category
    private string GetCategoryColor(string topicId)
    {
        var categoryColor = CategoryService.GetCategoryColorById(topicId);
        return categoryColor;
    }

    // Called whenever parameters of the component change, such as a new URL
    // This method extracts the category ID from the URL path
    protected override void OnParametersSet()
    {
        var urlPath = MyNavigationManager.ToBaseRelativePath(MyNavigationManager.Uri);
        // If the path contains a category ID, extract it;
        // otherwise, set categoryId to null
        categoryId = urlPath.Split('/').Length > 1 ? urlPath.Split('/').Last() : null;
    }

    // Toggles the selected flashcard between the question and answer side
    private void ToggleCard(int cardId)
    {
        // Check if the user is flipping to show the answer
        bool isFlippingToAnswer = selectedCardId != cardId || !showAnswer;

        // Toggle the display of the answer
        showAnswer = selectedCardId == cardId ? !showAnswer : true;
        selectedCardId = cardId;

        // Find the selected flashcard
        var flashcard = GetFilteredFlashcards().FirstOrDefault(f => f.Id == cardId);

        if (flashcard != null && isFlippingToAnswer)
        {
            // Increment OpenCount and update the flashcard data
            flashcard.OpenCount++;
            FlashcardService.UpdateFlashcard(flashcard); // Save the updated OpenCount
        }
    }

    // Helper method to render difficulty level as paw icons
    private RenderFragment GetDifficultyPaws(string difficultyLevel)
    {
        int pawCount = difficultyLevel switch
        {
            "Easy" => 1,
            "Medium" => 2,
            "Hard" => 3,
            _ => 0
        };

        return builder =>
        {
            for (int i = 0; i < pawCount; i++)
            {
                builder.OpenElement(i, "span");
                builder.AddMarkupContent(i, "<img src=\"icons/dog-paw.svg\" alt=\"Logo\" class=\"svg\" />");
                builder.CloseElement();
            }
        };
    }

}
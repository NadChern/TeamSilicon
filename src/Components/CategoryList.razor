@using ContosoCrafts.WebSite.Models
@using ContosoCrafts.WebSite.Services
@using Microsoft.AspNetCore.Components.Web

@inject JsonFileCategoryService CategoryService
@inject JsonFileFlashcardService FlashcardService
@inject LocalStorageCategoryService LocalStorageService
@inject NavigationManager NavigationManager
<!-- Google Fonts -->
<link href="https://fonts.googleapis.com/css2?family=Cute+Font&family=Londrina+Sketch&display=swap" rel="stylesheet">

<!-- Masonry grid to display category cards -->
<div class="CL-masonry-grid">
    @foreach (var category in CategoryService.GetAllData())
    {
        <div class="CL-card" style="background-color: @category.CategoryColor;">
            <div @onclick="() => NavigateToCategory(category.Id)"
                 class="CL-image" style="background-image: url('@category.Image');">
            </div>
            <div class="CL-card-count CL-cute-font-regular">
                @($" {ShowLabel(category.Id)} ")
                <!-- Heart icon with dynamic classes and click event -->
                <span class="material-symbols-outlined CL-heart-icon @GetHeartClass(category.Id) @GetGrowClass(category.Id)"
                      @onclick="() => ToggleHeartAsync(category.Id)">
                    favorite
                </span>
            </div>
        </div>
    }
</div>

@code {
    private HashSet<string> activeHearts = new();
    private HashSet<string> growingHearts = new();

    private bool _hasLoadedFromStorage = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !_hasLoadedFromStorage)
        {
            // 从本地存储加载数据
            activeHearts = await LocalStorageService.GetFavoritesAsync();
            _hasLoadedFromStorage = true;

            // 刷新 UI
            StateHasChanged();
        }
    }

    async Task ToggleHeartAsync(string categoryId)
    {
        if (activeHearts.Contains(categoryId))
        {
            activeHearts.Remove(categoryId);
            await LocalStorageService.RemoveFromFavoritesAsync(categoryId);
        }
        else
        {
            activeHearts.Add(categoryId);
            await LocalStorageService.AddToFavoritesAsync(categoryId);
        }

        growingHearts.Add(categoryId);
        InvokeAsync(StateHasChanged);

        await Task.Delay(200);
        growingHearts.Remove(categoryId);
        InvokeAsync(StateHasChanged);
    }

    string GetHeartClass(string categoryId) =>
        activeHearts.Contains(categoryId) ? "active" : string.Empty;

    string GetGrowClass(string categoryId) =>
        growingHearts.Contains(categoryId) ? "grow" : string.Empty;

    void NavigateToCategory(string categoryId) =>
        NavigationManager.NavigateTo($"/Flashcards/{categoryId}", forceLoad: true);

    string ShowLabel(string categoryId)
    {
        int count = FlashcardService.GetCountByCategoryId(categoryId);
        return count switch
        {
            0 => "Currently no card",
            1 => "Contains 1 card",
            _ => "Contains " + count + " cards"
        };
    }
}

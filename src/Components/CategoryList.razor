@using ContosoCrafts.WebSite.Models
@using ContosoCrafts.WebSite.Services
@using Microsoft.AspNetCore.Components.Web

@inject JsonFileCategoryService CategoryService
@inject JsonFileFlashcardService FlashcardService
@inject NavigationManager NavigationManager

<!-- Google Fonts -->
<link href="https://fonts.googleapis.com/css2?family=Cute+Font&family=Londrina+Sketch&display=swap" rel="stylesheet">

<!-- Masonry grid to display category cards -->
<div class="CL-masonry-grid">
    @foreach (var category in CategoryService.GetAllData()) 
    {
        <div class="CL-card" style="background-color: @category.CategoryColor;">
            <div @onclick="() => NavigateToCategory(category.Id)"
                 class="CL-image" style="background-image: url('@category.Image');">
            </div>
            <div class="CL-card-count CL-cute-font-regular">
                @($" Contians card number: {FlashcardService.GetCountByCategoryId(@category.Id)} ")
                <!-- Heart icon with dynamic classes and click event -->
                <span class="material-symbols-outlined CL-heart-icon @GetHeartClass(category.Id) @GetGrowClass(category.Id)"
                      @onclick="() => ToggleHeart(category.Id)">
                    favorite
                </span>
            </div>
        </div>
    }
</div>

@code {
    /// <summary>
    /// Set to track which hearts are active (pink).
    /// </summary>
    private HashSet<string> activeHearts = new HashSet<string>();

    /// <summary>
    /// Set to track which hearts are growing (animated).
    /// </summary>
    private HashSet<string> growingHearts = new HashSet<string>();

    /// <summary>
    /// Toggle the heart icon's active state and trigger grow animation.
    /// </summary>
    /// <param name="categoryId">The ID of the category being toggled.</param>
    void ToggleHeart(string categoryId)
    {
        // Use switch statement to manage heart state
        switch (activeHearts.Contains(categoryId))
        {
            // If heart is active, remove it from the set
            case true: 
                activeHearts.Remove(categoryId);
                Console.WriteLine($"Heart removed for category: {categoryId}");
                break;
                
            // If heart is inactive, add it to the set    
            case false: 
                activeHearts.Add(categoryId);
                Console.WriteLine($"Heart added for category: {categoryId}");
                break;
        }

        // Trigger grow animation
        growingHearts.Add(categoryId);
        InvokeAsync(StateHasChanged); 

        // Remove grow class after 200ms to allow animation reset
        Task.Delay(200).ContinueWith(_ =>
        {
            growingHearts.Remove(categoryId);
            InvokeAsync(StateHasChanged); 
        });
    }

    /// <summary>
    /// Get the CSS class for the heart icon based on its state.
    /// </summary>
    /// <param name="categoryId">The ID of the category.</param>
    /// <returns>Returns "active" if the heart is active.</returns>
    string GetHeartClass(string categoryId) =>
        activeHearts.Contains(categoryId) ? "active" : string.Empty;

    /// <summary>
    /// Get the CSS class to trigger the grow animation.
    /// </summary>
    /// <param name="categoryId">The ID of the category.</param>
    /// <returns>Returns "grow" if the heart is growing.</returns>
    string GetGrowClass(string categoryId) =>
        growingHearts.Contains(categoryId) ? "grow" : string.Empty;

    /// <summary>
    /// Navigate to the flashcards page for a specific category.
    /// </summary>
    /// <param name="categoryId">The ID of the category.</param>
    void NavigateToCategory(string categoryId) =>
        NavigationManager.NavigateTo($"/Flashcards/{categoryId}", forceLoad: true);
}
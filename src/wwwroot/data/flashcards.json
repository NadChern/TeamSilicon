[
  {
    "Id": "e0264da2-8c97-426a-8af2-0fb1bb64c243",
    "CategoryId": "OOP",
    "Question": "What are the four pillars of OOP?",
    "Answer": "Encapsulation, inheritance, polymorphism, and abstraction. ",
    "Difficulty": 1,
    "Url": "https://www.freecodecamp.org/news/object-oriented-programming-concepts-21bb035f7260/",
    "OpenCount": 5
  },
  {
    "Id": "4cce8136-84c3-4e69-abfb-51fedae8432b",
    "CategoryId": "OOP",
    "Question": "What is polymorphism and how is it implemented in OOP?",
    "Answer": "Polymorphism allows objects of different types to be treated as a common type. It\u0027s implemented through method overriding and interfaces, enabling methods to behave differently based on the object.",
    "Difficulty": 2,
    "Url": null,
    "OpenCount": 2
  },
  {
    "Id": "b35a8619-7a4a-44b4-a769-3d24e8f90c58",
    "CategoryId": "OOP",
    "Question": "What is encapsulation and why is it important?",
    "Answer": "Encapsulation is the bundling of data (attributes) and methods (functions) into a single unit or class, restricting access to certain components. It protects object integrity and promotes modular, maintainable code.",
    "Difficulty": 1,
    "Url": "https://www.geeksforgeeks.org/encapsulation-in-cpp/ ",
    "OpenCount": 4
  },
  {
    "Id": "e01073ce-be37-464a-aa8d-cc7e80579815",
    "CategoryId": "Python",
    "Question": "What is a Python dictionary and how do you access its elements?",
    "Answer": "Dictionary is a collection of key-value pairs, defined with curly braces { }. Elements are accessed by their key, e.g., my_dict[\u0027key\u0027].",
    "Difficulty": 1,
    "Url": "https://www.w3schools.com/python/python_dictionaries.asp",
    "OpenCount": 1
  },
  {
    "Id": "44e39ba0-7cf8-4a3a-904a-8ef7f2410d10",
    "CategoryId": "Python",
    "Question": "How do you handle exceptions in Python?",
    "Answer": "Exceptions in Python are handled using the try, except, and optionally finally blocks.",
    "Difficulty": 1,
    "Url": "",
    "OpenCount": 0
  },
  {
    "Id": "742fcdc1-f9ab-4f51-bb91-9d79f95a6ccf",
    "CategoryId": "Python",
    "Question": "What is the difference between a list and a tuple in Python?",
    "Answer": "A List is Mutable (can be modified after creation) and defined with square brackets []. A tuple is Immutable (cannot be modified after creation) and defined with parentheses ().",
    "Difficulty": 1,
    "Url": "https://www.geeksforgeeks.org/python-difference-between-list-and-tuple/",
    "OpenCount": 1
  },
  {
    "Id": "51e989ed-db3c-45fe-bba2-a0ece1e8f6a1",
    "CategoryId": "CSharp",
    "Question": "What is a nullable type in C# and how is it used?",
    "Answer": "A nullable type allows value types to hold null values. It\u0027s used with \u0027?\u0027 (e.g., int? x = null) to represent an undefined or absent value.",
    "Difficulty": 2,
    "Url": "",
    "OpenCount": 1
  },
  {
    "Id": "f366e99b-eab4-42c8-b517-ff282074de7e",
    "CategoryId": "CPlusPlus",
    "Question": "What is the difference between a pointer and a reference in C\u002B\u002B?",
    "Answer": "A pointer stores the memory address of a variable, while a reference is an alias to an existing variable. Pointers can be reassigned, but references cannot. ",
    "Difficulty": 2,
    "Url": "https://www.geeksforgeeks.org/pointers-vs-references-cpp/?ref=gcse_outind",
    "OpenCount": 2
  },
  {
    "Id": "18dabdbd-c1af-4e7c-88e2-3e860720cbc3",
    "CategoryId": "Mobile",
    "Question": "What is the difference between native, hybrid, and web mobile apps?",
    "Answer": "Native apps are built for specific platforms (e.g., iOS or Android), hybrid apps are developed using web technologies and run inside a native container, and web apps run in mobile browsers without installation.",
    "Difficulty": 1,
    "Url": "",
    "OpenCount": 0
  },
  {
    "Id": "f13c8078-ea8d-495e-9cf2-756736c5669a",
    "CategoryId": "DS",
    "Question": "What is a distributed system?",
    "Answer": "A distributed system is a collection of independent computers that appear to users as a single coherent system. These systems share resources and coordinate tasks to achieve common goals.",
    "Difficulty": 2,
    "Url": "",
    "OpenCount": 2
  },
  {
    "Id": "3ff9fbc5-55de-48ed-a836-10e6846390dc",
    "CategoryId": "DS",
    "Question": "What are the main challenges in distributed systems?",
    "Answer": "Key challenges include latency, fault tolerance, data consistency, and scalability.",
    "Difficulty": 2,
    "Url": "",
    "OpenCount": 2
  },
  {
    "Id": "ee62425d-4bc7-4975-9f32-450515ea77c7",
    "CategoryId": "DS",
    "Question": "What is the CAP theorem?",
    "Answer": "The CAP theorem states that in a distributed data store, it is impossible to simultaneously guarantee consistency, availability, and partition tolerance.",
    "Difficulty": 3,
    "Url": "",
    "OpenCount": 2
  },
  {
    "Id": "b5ea9290-428e-4617-8977-4b5a06970fa8",
    "CategoryId": "CSharp",
    "Question": "What is the difference between an interface and an abstract class in C#?",
    "Answer": "An interface defines a contract with no implementation, while an abstract class can contain both abstract and concrete methods. A class can implement multiple interfaces, but it can only inherit from a single abstract class.",
    "Difficulty": 2,
    "Url": "https://www.geeksforgeeks.org/difference-between-abstract-class-and-interface-in-c-sharp/",
    "OpenCount": 2
  },
  {
    "Id": "b0da6786-bb90-4009-852a-9c20733d88b1",
    "CategoryId": "CSharp",
    "Question": "What is the purpose of the \u0027using\u0027 statement in C#?",
    "Answer": "The \u0027using\u0027 statement ensures that unmanaged resources, like file handles or database connections, are properly disposed of when no longer needed. It simplifies resource management by automatically calling Dispose.",
    "Difficulty": 2,
    "Url": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/using-statement",
    "OpenCount": 2
  },
  {
    "Id": "f777a4e9-1c2f-4710-8def-8bb21347488d",
    "CategoryId": "CSharp",
    "Question": "How does async/await work in C#?",
    "Answer": "The async/await keywords are used to write asynchronous code more easily. \u0027async\u0027 marks a method as asynchronous, and \u0027await\u0027 pauses the execution until the awaited task completes, without blocking the thread.",
    "Difficulty": 3,
    "Url": "https://www.geeksforgeeks.org/async-and-await-in-c-sharp/",
    "OpenCount": 1
  },
  {
    "Id": "a76cb43e-93fe-484c-a38c-d1cd1be83fe3",
    "CategoryId": "CSharp",
    "Question": "What is the difference between a value type and a reference type?",
    "Answer": "Value types store actual data, while reference types store a reference to data. Value types are independent, so changes to one don\u2019t affect others. Reference types share memory, so changes to one reference affect all others pointing to the same data.",
    "Difficulty": 1,
    "Url": "https://www.c-sharpcorner.com/article/value-types-vs-reference-types-in-c-sharp/",
    "OpenCount": 4
  },
  {
    "Id": "35a3fcfb-e059-4705-be95-cb4045c48036",
    "CategoryId": "CSharp",
    "Question": "What is the difference between a struct and a class in C#?",
    "Answer": "A struct is a value type stored on the stack, while a class is a reference type stored on the heap. Structs are generally faster for small, simple data structures due to stack allocation, while classes are more efficient for larger, complex objects.",
    "Difficulty": 1,
    "Url": "https://www.geeksforgeeks.org/difference-between-class-and-structure-in-c-sharp/",
    "OpenCount": 0
  },
  {
    "Id": "f75a21ba-5f57-48ca-8bb3-6a83af490ee0",
    "CategoryId": "CPlusPlus",
    "Question": "What are the three ways to pass arguments to a function in C\u002B\u002B?",
    "Answer": "By Value: copies the argument; changes don\u2019t affect the original.\r\nBy Reference: uses a reference; changes affect the original.\r\nBy Pointer: passes a memory address; changes affect the original and allows null.",
    "Difficulty": 2,
    "Url": "https://www.geeksforgeeks.org/parameter-passing-techniques-in-cpp/",
    "OpenCount": 1
  },
  {
    "Id": "5c80c518-d84a-497e-b638-7a5543318bf4",
    "CategoryId": "Python",
    "Question": "How do you add an item to a Python list?",
    "Answer": "Use the append() method. Example: my_list.append(item).",
    "Difficulty": 1,
    "Url": "https://www.geeksforgeeks.org/python-list-append-method/",
    "OpenCount": 0
  },
  {
    "Id": "f27042f4-6dab-4615-a656-dd612fe521e4",
    "CategoryId": "Python",
    "Question": "How do you find the length of a list in Python?",
    "Answer": "Use the len() function. Example: len(my_list).",
    "Difficulty": 1,
    "Url": "https://www.geeksforgeeks.org/python-len-function/",
    "OpenCount": 0
  },
  {
    "Id": "aaf00498-2323-4245-b9bf-d4d21714f6f3",
    "CategoryId": "OOP",
    "Question": "How does abstraction differ from encapsulation? ",
    "Answer": "Abstraction hides complexity, showing only essential features via abstract classes/interfaces. Encapsulation protects data by restricting access with access modifiers. Abstraction focuses on functionality, while encapsulation secures data.",
    "Difficulty": 2,
    "Url": "https://www.geeksforgeeks.org/difference-between-abstraction-and-encapsulation-in-java-with-examples/ ",
    "OpenCount": 1
  },
  {
    "Id": "a421e6ab-4282-4685-bb63-60138940485c",
    "CategoryId": "OOP",
    "Question": "What are access specifiers and when to use them? ",
    "Answer": "Access specifiers control visibility of class members.\r\nPublic: accessible everywhere; use for public interfaces. \r\nPrivate: accessible only within class; use to hide implementation. \r\nProtected: accessible within class, subclasses; use for inheritance.",
    "Difficulty": 1,
    "Url": "https://www.geeksforgeeks.org/access-modifiers-in-c/?ref=header_outind ",
    "OpenCount": 1
  },
  {
    "Id": "714078be-6dc7-4545-8d64-c648d45b0f2c",
    "CategoryId": "OOP",
    "Question": "What is the difference between overloading and overriding?",
    "Answer": "Overloading occurs in a single class with methods of same name but different parameters (compile-time polymorphism). Overriding occurs between parent and child classes, where child redefines a parent method with same signature (runtime polymorphism).",
    "Difficulty": 2,
    "Url": "https://www.geeksforgeeks.org/function-overloading-vs-function-overriding-in-cpp/ ",
    "OpenCount": 0
  },
  {
    "Id": "90e4d14a-6c88-4664-86aa-88362c05b9d7",
    "CategoryId": "CPlusPlus",
    "Question": "What is the Rule of Three/Five in C\u002B\u002B? ",
    "Answer": "Rule of Three: Implement Destructor, Copy Constructor, and Copy Assignment Operator for proper resource management. \r\nRule of Five (C\u002B\u002B11): Add Move Constructor and Move Assignment Operator for efficient resource transfer. ",
    "Difficulty": 3,
    "Url": "https://www.geeksforgeeks.org/rule-of-five-in-cpp/?ref=ml_lbp ",
    "OpenCount": 1
  },
  {
    "Id": "6885e9f6-432a-4ad5-9254-4a4bb9a04bf0",
    "CategoryId": "CPlusPlus",
    "Question": "What is the difference between a shallow copy and a deep copy? ",
    "Answer": "Shallow copy copies only object\u0027s memory references, not the actual data. Changes to original affect the copy if shared resources are modified. A deep copy duplicates actual data, creating independent objects. Changes to one don\u0027t affect the other.",
    "Difficulty": 1,
    "Url": "https://www.geeksforgeeks.org/difference-between-shallow-and-deep-copy-of-a-class/ ",
    "OpenCount": 1
  },
  {
    "Id": "fa90bbe5-1021-41c3-9ebe-600156b72e0a",
    "CategoryId": "CPlusPlus",
    "Question": "What is a smart pointer, and how does it differ from a raw pointer?",
    "Answer": "Smart pointer manages the lifetime of dynamically allocated objects, automatically releasing memory when out of scope. Unlike raw pointers, smart pointers ensure safety (no leaks or dangling pointers), ownership semantics, and type safety.",
    "Difficulty": 3,
    "Url": "https://www.geeksforgeeks.org/smart-pointers-cpp/ ",
    "OpenCount": 1
  },
  {
    "Id": "bf7ce411-f8c4-454f-b9bb-e084142fa4f8",
    "CategoryId": "CPlusPlus",
    "Question": "What is the role of a destructor in C\u002B\u002B memory management?",
    "Answer": "A destructor is a special function called automatically when an object goes out of scope or is deleted. It releases resources like dynamic memory or file handles, ensuring proper cleanup and preventing leaks. ",
    "Difficulty": 1,
    "Url": "https://www.geeksforgeeks.org/destructors-c/",
    "OpenCount": 2
  },
  {
    "Id": "47584fd7-1557-4469-a12f-033a889fccf2",
    "CategoryId": "DS",
    "Question": "What is the purpose and process of leader election in distributed systems, and how does it handle node failures?",
    "Answer": "Leader election in distributed systems is a mechanism to appoint one node as the leader or coordinator among a group of nodes to ensure tasks are efficiently managed and coordinated. The process often uses algorithms like the Bully or Ring algorithms to choose the leader. In case of node failures, these algorithms ensure re-election, relying on communication between nodes to determine the next leader based on specific criteria like process IDs or priorities.",
    "Difficulty": 3,
    "Url": "https://en.wikipedia.org/wiki/Leader_election",
    "OpenCount": 3
  },
  {
    "Id": "b475bd45-7bc3-4963-bf08-f1718ed0940f",
    "CategoryId": "DS",
    "Question": "What mechanisms are used to achieve fault tolerance in distributed systems, and what are the trade-offs?",
    "Answer": "Fault tolerance in distributed systems is achieved using mechanisms such as replication, where data is duplicated across nodes; checkpointing, which saves system state periodically; and redundancy, which ensures critical components have backups. Trade-offs include increased resource usage (e.g., storage and network overhead), potential latency issues due to synchronization, and complexity in maintaining consistency among replicas.",
    "Difficulty": 3,
    "Url": "https://www.geeksforgeeks.org/fault-tolerance-in-distributed-system/",
    "OpenCount": 1
  },
  {
    "Id": "11503794-c5a2-4c3d-91da-8a68580be398",
    "CategoryId": "DS",
    "Question": "What are the types of consensus algorithms used in distributed systems, and how do they ensure fault tolerance?",
    "Answer": "Consensus algorithms like Paxos, Raft, and Byzantine Fault Tolerance (BFT) are used in distributed systems to ensure all nodes agree on a single value despite failures. Paxos achieves consensus by having a proposer suggest values to a quorum of acceptors, while Raft simplifies leader-based consensus for understandability. BFT addresses malicious node failures using advanced cryptographic techniques. These algorithms ensure fault tolerance by replicating state and handling network delays or node failures through retries and acknowledgments.",
    "Difficulty": 4,
    "Url": "https://en.wikipedia.org/wiki/Consensus_(computer_science)",
    "OpenCount": 1
  },
  {
    "Id": "93b76719-bd3f-4d87-a7fa-35c95b30fbcb",
    "CategoryId": "DS",
    "Question": "What is eventual consistency in distributed systems, and how does it differ from strong consistency models?",
    "Answer": "Eventual consistency is a consistency model used in distributed systems that guarantees all replicas of a data item will converge to the same state over time, provided no new updates occur. Unlike strong consistency models, which ensure all nodes see the same data instantly, eventual consistency prioritizes availability and partition tolerance, often at the cost of temporary inconsistencies. It is commonly used in systems like Amazon DynamoDB and Cassandra to achieve high availability and performance in highly distributed environments.",
    "Difficulty": 3,
    "Url": "https://en.wikipedia.org/wiki/Eventual_consistency",
    "OpenCount": 0
  },
  {
    "Id": "59fb576f-8d57-4c7a-9e25-3602703f8716",
    "CategoryId": "DS",
    "Question": "Why are distributed systems used?",
    "Answer": "Distributed systems are used to improve scalability, reliability, and resource sharing across multiple computers.",
    "Difficulty": 1,
    "Url": "https://en.wikipedia.org/wiki/Distributed_computing",
    "OpenCount": 1
  },
  {
    "Id": "91bd0d47-c4a4-4e65-9c2c-da7aadbe907f",
    "CategoryId": "DS",
    "Question": "What does replication mean in distributed systems?",
    "Answer": "Replication means storing copies of data on multiple nodes to ensure reliability.",
    "Difficulty": 1,
    "Url": "https://en.wikipedia.org/wiki/Replication_(computing)",
    "OpenCount": 1
  }
]